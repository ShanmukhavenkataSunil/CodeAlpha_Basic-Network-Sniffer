# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aucEJIhxGIdOUJVVV4qqHEtLWSxtsi46

# A basic network sniffer that captures and analyzes network traffic:
"""

pip install scapy

from scapy.all import sniff, IP, TCP, UDP

def packet_callback(packet):
    if IP in packet:
        ip_src = packet[IP].src
        ip_dst = packet[IP].dst
        protocol = packet[IP].proto

        # Determine the protocol type
        if protocol == 6:  # TCP
            proto = "TCP"
        elif protocol == 17:  # UDP
            proto = "UDP"
        else:
            proto = "Other"

        # Print packet details
        print(f"[{proto}] {ip_src} -> {ip_dst}")

        # Print TCP/UDP ports if available
        if proto == "TCP" and TCP in packet:
            tcp_src_port = packet[TCP].sport
            tcp_dst_port = packet[TCP].dport
            print(f"    Source Port: {tcp_src_port}, Destination Port: {tcp_dst_port}")
        elif proto == "UDP" and UDP in packet:
            udp_src_port = packet[UDP].sport
            udp_dst_port = packet[UDP].dport
            print(f"    Source Port: {udp_src_port}, Destination Port: {udp_dst_port}")

def main():
    # Sniff the network traffic
    sniff(prn=packet_callback, store=0)

if __name__ == "__main__":
    main()

"""# To run the network sniffer, you need to have appropriate permissions. On Unix-like systems, you typically need to run the script with root privileges:

bash
"""

sudo python network_sniffer.py

"""# Instead of printing to the console, we can log the captured data to a file for further analysis."""

import logging
logging.basicConfig(filename="network_traffic.log", level=logging.INFO)

def packet_callback(packet):
    if IP in packet:
        ip_src = packet[IP].src
        ip_dst = packet[IP].dst
        protocol = packet[IP].proto

        if protocol == 6:
            proto = "TCP"
        elif protocol == 17:
            proto = "UDP"
        else:
            proto = "Other"

        log_msg = f"[{proto}] {ip_src} -> {ip_dst}"

        if proto == "TCP" and TCP in packet:
            tcp_src_port = packet[TCP].sport
            tcp_dst_port = packet[TCP].dport
            log_msg += f"    Source Port: {tcp_src_port}, Destination Port: {tcp_dst_port}"
        elif proto == "UDP" and UDP in packet:
            udp_src_port = packet[UDP].sport
            udp_dst_port = packet[UDP].dport
            log_msg += f"    Source Port: {udp_src_port}, Destination Port: {udp_dst_port}"

        logging.info(log_msg)